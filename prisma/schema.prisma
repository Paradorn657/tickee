generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  role          String    @default("user")
  idCard        String?
  mobile        String?
  birthDate     DateTime?
  Receipt       Receipt[]
  Event         Event[]
  accounts      Account[]
  sessions      Session[]
 
  @@map("users")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Receipt {
  rec_id          Int       @id @default(autoincrement())
  rec_date        DateTime  @default(now())
  rec_quantity    Int
  rec_customer    User      @relation(fields: [rec_customer_id], references: [id])
  rec_customer_id String
  rec_seat        Seat_Type @relation(fields: [rec_seat_id], references: [seat_id])
  rec_seat_id     Int
}

model Seat_Type {
  seat_id          Int            @id @default(autoincrement())
  seat_name        String
  seat_price       Float
  seat_create_date DateTime
  seat_due_date    DateTime
  event_seat       Event          @relation(fields: [event_seat_id], references: [event_id])
  event_seat_id    Int
  Receipt          Receipt[]
  Seat_Dispatch    Seat_Dispatch?
  Promotion        Promotion?
}

model Seat_Dispatch {
  st_id        Int       @id @default(autoincrement())
  seat_type    Seat_Type @relation(fields: [seat_type_id], references: [seat_id])
  seat_type_id Int       @unique
  sd_max       Int
  sd_current   Int       @default(0)
}

model Event {
  event_id             Int         @id @default(autoincrement())
  event_name           String
  event_intro          String
  event_description    String
  event_images         String
  event_start_date     DateTime
  event_last_date      DateTime
  event_location       String
  event_seat_per_order Int
  producer             User        @relation(fields: [producer_id], references: [id])
  producer_id          String
  event_type           Event_Type  @relation(fields: [event_type_id], references: [et_id])
  event_type_id        Int
  Seat_Type            Seat_Type[]
}

model Event_Type {
  et_id   Int     @id @default(autoincrement())
  et_name String
  Event   Event[]
}

model Promotion {
  pro_id          Int            @id @default(autoincrement())
  seat_type       Seat_Type      @relation(fields: [seat_type_id], references: [seat_id])
  seat_type_id    Int            @unique
  pro_description String
  pro_discount    Float?
  pro_start_date  DateTime
  pro_last_date   DateTime
  pro_type        Promotion_Type @relation(fields: [pro_type_id], references: [pt_id])
  pro_type_id     Int
}

model Promotion_Type {
  pt_id     Int         @id @default(autoincrement())
  pt_name   String
  Promotion Promotion[]
}

model Admin_Data {
  ad_id         Int      @id @default(autoincrement())
  fee           Float
  banner_images String[]
}
